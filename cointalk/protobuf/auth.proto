syntax = "proto3";
package cointalk.protobuf;

import "google/protobuf/timestamp.proto";
import "common/types/types.proto";
import "cointalk/protobuf/profile.proto";

// required for actions that require user 2fa
message OtpChallengeRequest {
  string email = 1;
  ActionPermission action = 2;

  enum ActionPermission {
    LOGIN = 0;
    REGISTER = 1;
    UPDATE_PASSWORD = 2;
    DELETE_ACCOUNT = 3;
  }
}

message OtpChallengeResponse {
  string challenge_token = 1;
}

message LoginRequest {
  oneof loginBy {
    string email = 1;
    string username = 2;
  }
  string password = 3;
}

message LoginResponse {
  string session_token = 1;
  ProfileMessage Profile = 2;
}

message InitNewAccountRequest {
  string email = 1;
}

message InitNewAccountResponse {
  // short lived token
  string token = 1;
  string message = 2;
  bool success = 3;
}

message RegisterRequest {
  string token = 1;
  string username = 2;
  string password = 3;

  // basic details
  string fullname  = 4;
  common.types.Gender gender = 5;
  google.protobuf.Timestamp birthdate = 6;
  string country = 7;
}

message RegisterResponse {
  bool success = 1;
  string message = 2;
  ProfileMessage Profile = 3;
  string token = 4;
}

message ConfirmOtpRequest {
  string token = 1;
  string otp = 2;
}

message ConfirmOtpResponse {
  bool success = 1;
  string message = 2;
  string token = 3;
  optional Error error = 4;

  enum Error {
    OTP_EXPIRED = 0;
    OTP_INVALID = 1;
    OTP_MAX_ATTEMPTS = 2;
  }
}

message GetProfileRequest {
  string token = 1;
}

message GetProfileResponse {
  bool success = 1;
  string message = 2;
  ProfileMessage profile = 3;
}

message DeleteAccountRequest {
  string token = 1;
}

message DeleteAccountResponse {
  bool success = 1;
  string message = 2;
}

message ResetPasswordRequest {
  string reset_token = 1;
  string new_password = 2;
}

message ResetPasswordResponse {
  bool success = 1;
  string message = 2;
}

message CheckUsernameRequest {
  string username = 1;
  string token = 2;
}

message CheckUsernameResponse {
  CheckResult result = 1;

  enum CheckResult {
    // Username is valid and unique
    Valid = 0;

    // Username is not valid or already taken
    Invalid = 1;

    // username is not available
    AlreadyTaken = 2;
  }
}
